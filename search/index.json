[[],["Host a Website on Google Cloud Storage","2023年08月08日","/2023/08/host-website-on-gcs/","在開始閱讀內文前，假設我們已經在 Google Cloud platform 完成建立可以使用的 Project。 設定 Google Search Console 首先，Google 會先確認我們對要設定的網域，具備擁有或是管理權限。如果是在 Google Domains 購買的網域名稱，Google 會自動完成驗證。如果是在其他網域代理商購買，就會需要至 Google Search Console 進行網域的驗證。 Google Search Console 如果擁有網域，可以直接選擇左邊的網域，這個部分會需要對 DNS 進行驗證。跟着步驟進行，我剛好是透過 Gandi.net 購買網域，在這裡就可以直接點選下面的開始驗證程序。 DNS Verify 驗證程序將會導引至 Gandi 網站，輸入 Gandi 的帳號密碼後，就會自動進行網域擁有選的驗證，完成驗證後就可以獲得驗證成功的畫面。 DNS Verify Success 參考內容： Domain-named bucket verification | Cloud Storage | Google Cloud 建立 CNAME record 對應 在網路上，網址都是代表一個位置，DNS 會解析網址成為我們要去的目標。由於 GCS（Google Cloud Storage） 的位址為 Google 所擁有，要使用我們自己定義的網址來當作 GCS 的位址，我們需要在 DNS 建立一個別名指向 GCS。 以 作為例子： 類型：CNAME 名稱：test.agriweather.cloud 主機名稱：c.storage.googleapis.com. Note: 主機名稱最後要加上一個點，才不會加上自己的網域名稱變成 。 host-on-gcs-cname 建立 Cloud Storage Bucket 在這個步驟中，我們要建立一個 Bucket 來放置網頁的內容。由 Google Cloud Console 中找到 Cloud Storage 項目，點擊上方 CREATE 來建立一個新的 Bucket。 完成建立的幾個步驟內容 Name your bucket：這個 Bucket 的名稱，請使用前述步驟中，預計要使用的 domain name 來命名，如 test.agriweather.cloud。 Choose where to store your data：選擇存放的地方，有 、 、 ，存放在越多位置有可能離你的使用者越近，但是價格也會比較高。 Choose a storage class for your data：選擇 Storage 的類別，選擇 Standard。 Choose how to control access to objects：控制訪問的權限，把預設 Enforce public access prevention on this bucket 的勾選移除，Access control 部分我選擇 Uniform 整個資料夾都統一權限。 Choose how to protect object data：最後這個項目使用預設設定 None。 設定 Public 權限 使用 GCS 來作為靜態網站的位置，要讓所有人都可以訪問 Bucket 中的內容，預設是無法存取內容，所以我們要設定 Bucket-level 的訪問權限至 Public access。 點選至上個步驟建立的 Bucket（使用 Domain Name 作為名稱的 Bucket），進到 Bucket detail 的畫面。 選擇 Permissions 標籤。 host-on-gcs-permission.png 點擊 GRANT ACCESS 按鈕，在 New principals 中輸入 allUsers，並在 Role 角色的部分找到 Cloud Storage \u0026gt; Storage Object Viewer host-on-gcs-grant-access.png 完成設定後，Permissions 標籤頁面中就會出現如下的畫面 host-on-gcs-permission-alert.png 編輯 WebSite Configration 進入最後一個步驟，設定進入的索引頁（index Page）和自定義的錯誤資訊頁（Error Page）。索引頁是由 屬性控制，錯誤頁則是由 屬性控制。 設定 WebSite Configration 屬性的方法，在 Bucket 列表的最後面有三個點，點擊後的清單中有個 Edit website configration 的項目。 host-on-gcs-website-config.png 這個項目會有個設定的對話視窗，已經預設在 Index (main) page suffix 填上 index.html， Error (404 not found) page 填上 404-Page.html。如果在網站上有對應的檔案則可以不用修改。 host-on-gcs-website-config-page.png 也可以使用 gsutil 指令的方式設定。 如果使用 Vue.js 這類的前端框架，平時我們在 的設定如下。 host-on-gcs-nginx-config.png 主要是當發生路徑不存在的時候，嘗試使用主目錄下的 index.html 做為程式的進入點，不會直接拋出 404 NotFound。同樣的意思，在 Cloud Storage Bucket 的 website configration 設定中，我們把 Error (404 not found) page 的部分，也填上 index.html 索引頁，就能在當路徑不存在的時候，會導引至 index.html。 測試網站 現在我們可以打開瀏覽器，在網址列的地方輸入網址 ，來確認一下我們網頁的內容是不是都能正常顯示出來了。 Note: 完成後，我們只能使用 的方式連線。若要使用 連線，我在另一篇文章中再來說明。 參考資料： Host a Static Website in Google Cloud with Cloud Storage How To Host a Vue.js Static Website With GCP Cloud Storage | by Bhargav Bachina | Bachina Labs | Medium Static website examples and tips | Cloud Storage | Google Cloud "],[],["Install Openvas on Google Cloud","2023年05月05日","/2023/05/install-openvas-gcp/","以手動方式安裝 OpenVAS 是一個步驟非常多且繁雜的過程，可以參考這篇文章： Install GVM 21.04 on Debian 11/Debian 10 - kifarunix.com 的內容。其中如果還有什麼錯誤，還需要花更多的時間來處理過程中出現的問題。因此手動從頭到尾的安裝就不是想使用的安裝方式。 在網路上有很多安裝 OpenVAS 的教學，都是直接在 Kali Linux 上，可以無痛或少痛的安裝。然而在 GCP 上沒有 Google 官方的 Kali Linux image 可以直接使用，雖然在 Google Cloud MarketPlace 能夠查到直接 使用，但是價格一個月需要 92.80 美金，對個人使用來說價格蠻高的。 因此也有使用者是透過 VirtualBox 安裝後再上傳的方式（infotechca/kali-on-gcp: How to Upload or Install Kali Linux on Google Cloud ），來達到在 GCE 上用 Kali Linux。 上述兩個方式，都是直接在 GCE 上安裝 Kali Linux，接着我們就可以在 Kali Linux 上使用 的方式安裝 OpenVAS。 因我只有想使用 OpenVAS 並不需要其他 Kali 所安裝的工具，發現其實 Kali Linux 也是基於 Debian 的分支版本，網路上有些分享的方法1，是先在 GCP 安裝了 Debian 之後再改造為 Kali。如果是這樣，那就有可能利用類似的方式，將 Kali 加入 source list 中，利用 Kali 的來源使用 的方式安裝，達到比較簡易的安裝方式。 安裝 OpenVAS Step 1. 加入 Kali Source 及更新套件清單 將 Kali Network repo 加入 。 Kali 有兩個主要的分支可以選擇： kali-rolling：預設分支，比較頻繁的更新 kali-last-snapshot：可以安心使用的穩定版本 在這裡我選擇 kali-rolling 版本的分支，以下面的語法加入到 source.list 中 加入完成後，更新套件清單 參考資料： Kali Network Repositories (/etc/apt/sources.list) | Kali Linux Documentation Step 2. 加入金鑰 在上個步驟 apt update 時，過程中會出現簽章無效的錯誤 我們必須要加入金鑰才能更新 Kali 套件清單，加入的方法如下 Note: 部分網路上的教學的 keyserver 使用 ，目前已經失效查不到 所以我改用 作為 keyserver Step3. 安裝 OpenVAS 完成 Kali Repo 加入 source.list 程序，進行套件更新，接下來只要一個語法就可以進行安裝 初始化及啓動程式 初始化 GVM 執行下面的指令開始初始化 GVM 的步驟，執行之後因為過程中會包含一些 feed 的更新，會花相當久的時間，會花上 1~2 小時的時間，可以泡個咖啡追個劇再回來。 整個初始化的過程完成後，記得複製步驟最後生成的密碼，在我們第一次登入的時候會用上。 gvm-setup-passwd 檢查 OpenVAS 及啓動服務 完成安裝的步驟之後，接下來我們使用下列的語法，驗證安裝是否正常。 使用下面指令，啓動 OpenVAS 服務。執行之後會 listen 在 Port。 Forward Proxy Server 如果是在本機上安裝，只要開啓瀏覽器並在網址列中輸入 就可以連結上 OpenVAS 的 Web GUI，看到登入畫面。由於我們是安裝在 Google Compute Engine 上，沒有辦法使用只允許本機的服務。這時候我們可以使用代理伺服器（Proxy Server）的方式，幫我們將外部的 Http Requeat 橋接至本機指定 Port 的服務上。 安裝 Nginx 在 Debian 上安裝 Nginx Web Server 方法很簡單，直接通過官方的套件庫安裝即可。 設定 Nginx Proxy 修改 Nginx Web Server 設定 在 location 中加入 代理伺服器將封包轉向本機的 。 重新 reload nginx 讀取設定的內容。 設定 https 完成 Nginx Proxy 轉送的設定後，在網址列輸入 http 位址就會出現 OpenVAS 的登入畫面。然而在輸入帳號密碼之後，系統阻擋了非 https 的登入方式，提示訊息顯示不是 https 登入你的資訊有可能會被攔截。 這時候我們就可以利用 Certbot 來取得憑證及完成 Https 設定。細節在此就不再多做敘述，跟着 Certbot 的說明安裝即可，也是一個指令安裝，一個指令就可以設定完成。 平時維護 重設 admin 密碼 如果忘記 admin 登入的帳號密碼，可以利用下面的指令重新設定密碼。 更新 Feed 下面的指令能夠更新 feed 的內容。 參考資料： Install GVM 21.04 on Debian 11/Debian 10 - kifarunix.com How to install and run Kali-Linux on Google Cloud - YouTube m0ns7er/GCP: Kali linux on GCP Complete Beginner OpenVAS Vulnerability Scanning Tutorial - Cyber Security - YouTube How to install and run Kali-Linux on Google Cloud - YouTube \u0026#160;\u0026#x21a9;\u0026#xfe0e; "],[],["Openvas Community Container","2023年04月04日","/2023/04/openvas-community-container/","OpenVAS（Open Vulnerability Assessment Scanner）是一款開源的弱點掃描檢測工具，目前是由 Greenbone 維護，能夠持續的更新 NVT，SCAP\u0026hellip;等弱點資料庫，對已知的漏洞及弱點進行掃描。OpenVAS 同時有 community 及 commercial 版本，community 使用的是 Greenbone Community Feed，沒有官方的技術性支援。 依據前人的經驗，OpenVAS 安裝不容易，建議如果要本機安裝，可以使用 Kali Linux 這個發行版本，已經包含於 Kali 套件庫中。如果不是使用 Kali Linux，像我的開發環境是 Ubuntu，就可以使用 docker container 的方式來安裝。 軟硬體需求 軟體版本 Greenbone Community Documentation 官方的文件支援下面這幾個 Linux 發行版本的安裝： Debian stable (bullseye) Ubuntu 22.04 LTS Fedora 35 and 36 CentOS 9 Stream 必須先安裝完 及 。 硬體需求 官方對於 給出的執行需求建議。 最小需求: CPU Cores: 2 Random-Access Memory: 4GB Hard Disk: 20GB free 建議需求: CPU Cores: 4 Random-Access Memory: 8GB Hard Disk: 60GB free 使用 Setup and Start Script 安裝 官方 Greenbone Community Documentation 頁面 上，很貼心的提供了 Setup and Start Script，讓使用者可以透過執行這個 的方式，就能夠快速的安裝。 一開始我選擇以 script 的方式進行安裝，但在下載執行後會出現如下的錯誤訊息。觀察了一下 shell script 中的內容，我認為很有可能是因為 的版本不同，我使用的是 docker compose v2，v2 已經被規劃為 docker CLI 的一部分，所以發生這些錯誤。 我電腦中的 及 版本為： 最後，沒有透過 ，依照同頁文件前面的內容自行一個個步驟改變一下指令執行，還是可以順利完成安裝。 自行依照步驟安裝 1. 下載 docker-compose YAML 檔 在這官方說明的頁面 中主要使用 方式來安裝 Greenbone Community Edition 的 containers。這個方式主要是透過一個 YAML 設定檔，依照檔案裡面設定的服務內容，來安裝所需要的 containers。 可以直接使用下面語法，下載官方在 GitHub 準備好的 檔案。 或是複製下面 YAML 內容（版本為 22.4），存成 檔案。 2. 下載及啓動 containers 透過下面的語法，直接下載 Greenbone Community Containers，下載過程會需要一下下時間。 都出現 Pulled 下載完成後，就可以透過下面的方式進行啓動。 Note: 以背景方式啓動 3. 設定 Admin 密碼 如果要使用自己定義的 Admin 密碼，可以使用下面的語法來做修改。 4. 開啓瀏覽器開始使用 在完成前述步驟後，就可打開瀏覽器開始使用 Greenbone Community Edition 了。下面語法可以開啓系統預設的瀏覽器。或是自行打開瀏覽器，在網址列輸入 就可以看到登入畫面。 更新內容 1. 更新 Containers 更新 Greenbone Community Containers 的方式，只要重新拉取 images 然後再重新啓動 container 就可以了。 2. Greenbone Community Feed 更新 Greenbone Community Feed 的同步更新有兩個部分組成： 拉取新的 data container images 透過 daemon 加載到記憶體和資料庫中 Greenbone Community Feed 資料是透過幾個 container images 提供的，當這些 images 被啓動之後會自動複製到 docker volume，然後 daemon 會從 docker volume 中取得資料。 下面的語法可以下載 Greenbone Community Feed 的 data container images 下面的語法啓動 container images 來複製資料至 docker volume 結語 使用 docker compose 方式，來安裝 Greenbone Community Edition Containers 以使用 OpenVAS 弱點掃描工具，是一個相對容易且馬上可以進行弱點掃描的方法。 網頁應用軟體的普及和方便性，身為開發者的我們，對於資安更需要多些重視。定期利用 OpenVAS 這類弱點掃描工具，來發覺系統或程式的漏洞，即時的進行修補及更正，會是我們該常駐的理念，以保障使用者的安全性。 參考資料： Greenbone Community Containers 22.4 - Greenbone Community Documentation Workflows - Greenbone Community Documentation "],[],["修改 Docker 預設資料目錄路徑","2023年03月03日","/2023/03/change-docker-data-directory/","Docker 預設使用的路徑為 這個資料夾會儲存所有的 images, volumes 等等的內容，隨着使用時間會漸漸增加到非常大。如果和我一樣 是掛載的獨立分割區，空間被佔用滿了就會影響系統的運行。 我們可以透過修改設定的方式，將預設的資料路徑更改至不同位置。在開始之前，我們用 指令，先觀察 目前使用的預設資料夾路徑是什麼。 瞭解現在的路徑，在完成所有步驟後可以用來比對是否更動。我們可以開始進行修改的步驟如下： 1. 停止 docker 運行 停止正在運行的 docker daemon 確認 docker 是不是真的停止運行 2. 新增設定檔 新增一個設定檔來告訴 docker 資料目錄的位置，設定檔的位置及檔案名稱為 ， 設定檔為 json 格式內容填寫如下： Note: 為要用來放置 docker 資料目錄的新路徑 3. 複製當前資料目錄內容 使用 或是 指令，將當前資料目錄的內容複製至新的位置。 4. 修改舊資料目錄名稱 在完成前述複製步驟之後，將舊的資料目錄修改名稱，目的是希望用來確認 docker daemon 不會去用原來的資料目錄。（會找不到路徑） 5. 啓動 docker 及檢查 重新啓動執行 docker daemon。 docker daemon 開始運行之後，再用 指令來檢查是不是套用可新設定的 。 6. 刪除舊資料夾 如果在使用上都沒有問題，就可以把原先舊的預設資料目錄移除，釋放出空間給系統使用。 參考資料： How to change docker root data directory | by DPBD90 | Medium "],[],["phpMyAdmin 啟用兩階段驗證","2023年01月01日","/2023/01/enable-phpmyadmin-2fa/","phpMyAdmin 是一個以 PHP 為基礎開發，Web-Base 方式架構在伺服器上圖形化的 MySQL/MariaDB 的資料庫管理工具。 安裝完 phpMyAdmin 登入時，若在首頁下方出現如下圖的提示警告訊息 The phpMyAdmin configuration storage is not completely configured, some extended features have been deactivated. 表示缺少「phpmyadmin」資料庫可以用來儲存 phpMyAdmin 的一些額外設定，而啓用兩階段的功能也會需要這個 phpMyAdmin Configuration Storage 來儲存個人的 2FA 設定內容。 建立 phpMyAdmin Configuration Storage 若要開啓 phpMyAdmin Configuration Storage 有兩個已知的方式： 匯入 phpMyAdmin 中的 建立 資料庫 在頁面檢測的結果選擇 Create 的連結 匯入 create_tables 建立資料庫 我們可以在 phpMyAdmin 中的 sql 資料夾（ ）下，找到名稱為 的 SQL 檔，這個 SQL 檔能夠用來建立儲存進階功能設定的 資料庫。 可以在 command line 用 mysql cli 工具匯入，指令如下： 也可使用 phpMyAdmin 提供的圖形化界面的匯入功能，將 檔案匯入。成功的匯入後就能看到增加了一個 資料庫，其中有許多以 開頭的資料表。 頁面檢測的結果的 Create 連結 首頁下方警告訊息 「The phpMyAdmin configuration storage \u0026hellip;略\u0026hellip; deactivated」 緊接着一個 Find out why 的連結，點擊之後，會轉換到 phpMyAdmin configuration storage 檢查程序頁面，頁面檢查失敗時出現另一個警告訊息 「Create a database named \u0026lsquo;phpmyadmin\u0026rsquo; and setup the phpMyAdmin configuration storage there」，最前方的 Create 為一個可以點擊的超連結。這個連結會帶我們到建立 資料庫的頁面。 建立 configuration storage 設定 在資料庫中，我們不會讓所有的使用者都擁有可以完全修改 資料庫的權限，避免s使用者不小心更動或是刪除別人的資料，所以我們需要新增一個專門給 configuration storage 使用的帳號並賦予權限，專門用來操控這些進階設定儲存用。 建立使用者及密碼 使用具有資料庫管理者權限的帳號登入資料庫，建立給 configuration storage 使用的新使用者帳號及密碼，名稱可以自訂。並給予在 資料庫中有 、 、 、 四個權限。 修改 config.inc.php 設定檔 開啟 設定檔，在對應的 加入如下的設定內容， 為前一個步驟設定的帳號名稱， 為前一個步驟設定的密碼。 開啓兩階段認證 再回到 phpMyAdmin 的頁面，Setting -\u0026gt; Two-factor authentication，在 Configure Two-factor authentication 區塊中選擇 Authentication Application (2FA)，再按下 Configure two-factor authentication 按鈕。 接著會出現一個 QRCode 的畫面，打開行動設備中的 Google Authenticator 軟體（或是 Authy）軟體，掃描頁面上的 QRCode，再將出現的 OTP(One-Time Password) 填入 QRCode 下方的輸入格， 最後按下 Enable two-factor authentication 就完成整個步驟。 關閉兩階段驗證 如果要關閉兩階段驗證，同樣回到 Setting -\u0026gt; Two-factor authentication，按下 Disable two-factor authentication 即可。 參考資料： phpMyAdmin兩步驟驗證 | 易普印 e知識百科 phpMyAdmin 啟用2FA - linux | 丁丁的亂寫空間 phpMyAdmin 双因素身份验证配置 - VPSdada "],[],["Ubuntu Netplan Static IP 設定","2023年01月01日","/2023/01/ubuntu-netplan-static-ip/"," Canonical netplan 什麼是 Netplan 自 Ubuntu 17.10 開始網路的設定就改為使用 netplan 工具作為前端設定工具，我們只需要撰寫少量的設定內容，就可以讓 netplan 生成後端的網路設定文件，無論後端是使用 NetworkManager 或是 Systemd-networkd。 Netplan 設定 Netplan design overview netplan 的設定是使用 YAML 格式撰寫，設定檔在 路徑下，新安裝時如果有設定 IP 應該會出現如 的設定檔。若完全沒有任何設定檔，可以使用以下指令自動產生預設的設定檔： 編輯設定檔文件 執行 測試並套用網路設定檔 Note: 執行指令之後如果設定檔語法沒問題，就會套用新的設定並進行確認，如果 在 120 秒內沒有確認，就會自動恢復成原來的網路設定，這樣的設計主要是避免在遠端更改設定時，不小心把自己檔在外面。 使用 命令讓網路進行生效。 gateway4 名稱更換 若出現如下的警告訊息，先別緊張。 這段警告主要原因是在 Ubuntu Server 22.04 中，原來的 項目即將要失效，即使出現上述警告仍能正常的使用網路，未來將更改為 名稱，建議還是修改設定為新的名稱內容。 檢查設定結果 執行以下指令查看網路的 ip 位址， 要查看預設的路由，可以執行 參考資料： Canonical Netplan "],[],["GCP VPC Network Peering","2023年01月01日","/2023/01/gcp-vpc-network-peering/","在 Google Cloud Platform 中，如果要將兩個不同的 project 或是不同 organization 的 Private Network 相連，可以透過 VPC network peering 的方式來達成，讓一些服務可以在 Private 下互通，降低使用外網的風險來增加安全性。 VPC network peering 有幾項需要注意的部分： 一個 Network 最多只能有 25 個 peering Networks 一個 Network 和 peered Networks 最多能有 15,500 個 instance。 Peered Networks 間的 subnet IP range 不能重疊，如果一個有 ，另一個就一定不能重複。 只支援 VPC Network Peering 不支援 legacy networks 不能透過 peered networks 連線至 VPN 1. 建立 Peering 設定 在建立之前，先將要 peering 的兩個 Project 建立好 VPC 網路及其 subnet。會在兩個專案中建立 peering 相互連結只對方。 開啟 Google Cloud console，選擇（或搜尋）VPC network 點選其中的 VPC network peering。 在列表上方點擊 CREATE PEERING CONNECTION 開始 看到簡短說明和提示後點擊 CONTINUE 繼續 輸入這個 connection 要什麼名稱 選擇在專案中要作為 peering 的 VPC 因為我們要和另一個專案 Peer，點選 In another project 填入另一個 Project ID，注意不是填入 Project Name 輸入另一個專案下要連結的 VPC network 名稱 最後按下 CREATE 建立 perring create 建立後，在另一個專案完成設定前，Status 會顯示為 inactive 狀態。 perring inactive 2. 對等建立 Peering 設定 同樣的步驟，在另一個專案中也完成建立對等的 VPC network peering connection。當要連線的兩個專案都建立好到對方的連線後，在彼此 connection 列表中的狀態就會顯示為 Active 了！ perring active 3. 測試連線 完成前述建立 VPC networking peering 的步驟之後，就可以在兩邊的 GCE 中進行測試。作為測試的這兩台 GCE，網路部分要是已經建立連結的 VPC subnet，SSH 連結進入 GCE 中，在 Terminal 中以 指令相互測試對方的 Internal IP，如果可以看到 ping 的回應就表示兩邊的 VPC network peering 建立已經成功。 後記 原本希望在建立 VPC neetwork peering 之後，可以讓 Project B 的 GCE 能夠連結 Project A 中的 CloudSQL，Project A 中的 CloudSQL 設定僅能 private 才可以連線。 實際測試在 Project B 中的 GCE 一樣是無法連上 CloudSQL，查詢了一下可能的原因，當 CloudSQL 建立的時候，在 GCP 上實際是建立了一個專案用 VPC network peering 的方式連結過去，當 Project A \u0026lt;\u0026mdash;\u0026ndash;\u0026gt; Project B，Project B \u0026lt;\u0026mdash;\u0026ndash;\u0026gt; Project C 都建立好 peering connection 時，Project A \u0026lt;\u0026ndash;x\u0026ndash;\u0026gt; Project C 這兩個專案是沒有直接連結的。 所以我們無法讓 Project B 直接連結到 CloudSQL，因為建立 peering 是兩個專案都要設定才行，根據這篇 How can I access the Cloud SQL with private IP only from another Project/VPC? | C2C Community 內容說明，如果要這麼做只能請 Google Cloud Platform 那邊幫忙設定了。另一個方式，則是使用 Shared VPC 的方式來實現了。 參考資料： VPC Network Peering | Google Cloud [手把手教學] VPC Network peering 基本介紹 - iKala Cloud iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天 "],[],["GitHub Pages 使用自定的 Domain Name","2022年12月12日","/2022/12/github-pages-custom-domain/","當我們將靜態網頁的內容上傳至 GitHub Page 後，我們可以使用 瀏覽上傳的內容，但如果想更具自己代表性，我們可以更換使用自己所購買網域的網址。 1. 購買網域 在使用自己名稱的網址前，要先有屬於自己的域名，選擇自己習慣的網域代理商（我選擇的是 Gandi ）。獲得自己的網域名稱後，在域名的列表中可以看到目前擁有的域名有哪些。 2. 設定 DNS Record 因為 Gandi 本身有提供 DNS Server 的服務，我們只需要在 Gandi 網站裡做好 Record 設定就可以使用，不用再自己架設 DNS 伺服器，蠻方便的。 在域名列表中，選擇點選要成為 GitHub Page 使用的域名，進入後選擇「DNS 記錄」項目，在這裡我們可以新增和修改 DNS Record。DNS Record 有許多不同的類型，這次我們會使用的主要有 A Record 及 CNAME Record。 A Record : A 代表的是 Address ，是紀錄 IP Address 與網域名稱的對應的記錄，A 記錄會將網域名稱指向一組 IP。 CNAME Record ： CNAME 是網域名稱的別名，用來將子域名指向另外一個主機的域名，最常見的就是將 www.abc.com（子域名）指向 abd.com（購買的主域名） ，避免使用者找不到網站。 2.1 取得 GitHub IP 為了讓 GitHub Page 能夠支援使用 HTTPS 設定，依據官方文件 ，需要在 DNS Record 中將 base domain 加入 GitHub 的 IP，我們可以使用 或是 的方式查詢： 2.2 新增 A Record 新增 A 類型的 Record，將 名稱設定至前一個步驟查詢到的 IP，如下 A Record DNS 設定之後會需要等待一段時間才會生效，可以再用 指令查詢，出現下面的結果就是已經生效了。 2.3 新增 CNAME Record 新增 CNAME 類型的 Record，我希望將 對應至 GitHub Page，因此設定的時候將名稱為 設定至 。 CNAME Record 3. GitHub Repo 設定 最後至 Github Pages 的 Repo 中設定 Custom domain（ -\u0026gt; ）， 之後 GitHub 會進行 DNS 的檢查，檢查成功後 GitHub 會在這個 Repo 下建立一個 CNAME 檔案，檔案的內容就是我們設定的 domain name 網址。 GitHub Pages Settings Note: 設定時，將下方 勾選起來，GitHub 就會幫忙處理使用自己網址時的 HTTPS 憑證內容 之後當我們再瀏覽這個 Github Pages 時，網址顯示的就會是我們自定的網址，而不是 Github Pages 提供的 github.io 網址。 參考資料： Managing a custom domain for your GitHub Pages site - GitHub Docs "],[],["修正 GCE 複製檔案至 GCS 權限錯誤","2021年05月05日","/2021/05/gce-copy-to-gcs-accessdeny/"," 複製出現 403 錯誤 GCE (Google Compute Engine) 在預設初始的狀態下，雖然硬碟映像檔中已經預先安裝 google cloud 工具在系統中，沒有調整權限的情形下利用 工具複製檔案至 GCS (Google Cloud Storage) ，如下面語法： 執行後會出現 的錯誤訊息，即使在相同的專案及區域中也無法複製檔案至 GCS 上。 開啟 GCE Instance 的 Cloud API 存取 預設下 GCE 虛擬機器可以對同一個專案下的 GCS 具有讀取權限，如果需要寫入 GCS 就需要先進行配置調整。瀏覽器開啟 GCP Console ，在下拉選單中選擇專案，在進行調整前需要先停止虛擬機，然後才能進行編輯。 確定 GCE 的虛擬機器停止後，點選虛擬機的名稱進入這臺虛擬機的詳細內容 (Detail)，點選上方的編輯，在編輯狀態中向下拉動畫面到 (Access Scopes)，可以看到預設是選在 ，如果對於各項API熟悉，可以選擇 然後在儲存空間部分將預設 更改成 。 如果不想一個一個調整，可以直接選擇 這個項目。完成設定儲存後重新啟動 GCE 虛擬機器。 清除 gsutil 快取 完成重新啟動 GCE虛擬伺服器後，試著再執行複製檔案至 GCP 的語法。 如果仍然遇到 的錯誤訊息，試著清除家目錄下的 .gsutil 快取資料夾。 再重新執行一次複製應該就可以獲得成功。 "],[],["Laravel CICD with Github Actions","2021年02月02日","/2021/02/laravel-cicd-github-actions/","GitHub Actions 為 2019 年 11 月 GitHub 推出的服務，可以用來測試、封裝、發佈或是部署程式碼，一連串的動作建立自動化的流程，達到持續整合/持續部署（CI/CD）的目的。 Github 讓開發者能將一些重複的動作寫成腳本，使其他開發者也可以引用這些 Action，把這些 Action 組合起來執行，就能夠完成前述 CI/CD 的過程。GitHub 為此成立了一個 Action 的 Marketplace ，可以搜尋到其他人上傳的 Action。 這篇文章中，將使用 GitHub Actions 將 Laravel 專案測試及部署至自己的 Linux 伺服器上。 1. GitHub Actions 名詞 Workflow（工作流程）：可設定為一個自動化流程的程序，Workflow 由一個或多個 Job 組成，可經由事件觸發執行，是 YAML 格式檔案放在 資料夾中。 Job（任務）：每個 Job 由多個 Step 組成，一個 Job 會在一個新的執行實例中（instance）執行。不同的 Job 可以同時執行，也可以依照前面的 Job 狀態依順序執行。 Step（步驟）：每個 Step 都是在相同的執行實例中執行，Step 可以是執行指令或是 Action。每個 Step 可以執行一個或多個 Action。 Action（動作）：Workflow 最小單位。 2. Workflow 文件 GitHub Actions 的 workflow 文件為 YAML 格式，文件名稱可以自定但副檔名為 。GitHub 只要在 資料夾中發現有 文件就會自動執行。 這個 YAML 文件的語法分為幾個部分 name: workflow 名稱 on 指定觸發 workflow 的條件（事件） jobs workflow YAML 文件的主要部分， 中包含一或多個 ，列出每一個 ，可以使用 關鍵字指定和其他 的依賴關係。使用 來指定執行的實例 上面例子有兩個 ， 分別為 和 ， 依賴於 ， 需要等待 完成才能執行。 step 每個 下有多個 ，每個 主要有三個部分 ， : 名稱 : 執行的指令或是 action : 執行時的環境變數 綜合以上的基本結構，一個基本的 workflow YAML 結構如下： 3. 建立 Workflow 在 GitHub Actions 的 Workflow 的設計上，我會趨向把持續整合（CI）及持續部署（CD）分為兩個獨立的 Workflow YAML 檔，在每次整合是都能先經過測試程序，在程式碼較為穩定的時候再部署至指定的伺服器。 3.1 持續整合（CI: Continuous Integration） 軟體開發的過程中，測試是相當重要的一環。以目前軟體開發逐漸提高的複雜度，已經不容易使用傳統長時間的測試方式，需要更即時的測試。加上軟體開發大都以團隊協同合作進行，在彼此程式碼整合前需要先經過持續的測試。 在 資料夾中建立 內容如後。 3.2 持續部署（CD: Continuous Deployment） 在前段的說明中有提到在程式碼穩定之後再部署，「穩定」這裡我的定義會是在 PR 確認 merge 完成關閉時進行。主要是透過 SSH 的方式，連結至指定伺服器執行部署的腳本 (shell script)。 3.2.1 準備工作： 設定部署帳號 由於是使用 SSH 方式讓 GitHub Action 可以訪問我們的伺服器部署，在目標伺服器上開啟一個部署專用的帳號，限制帳號的權限不要太大提高安全性。 建立伺服器登入憑證 在目標伺服器上產生使用 指令產生公私鑰，將公鑰加入 ，私鑰加入 GitHub 的加密變數中，做為連線登入使用的憑證。 修改 sudoer 權限 因為我使用 作為 Web Server， 本身無法處理 PHP 程式，需要透過 PHP-FPM (FastCGI Process Manager) 來解譯處理 ，部署的最後會需要重新 Reload PHP-FPM Service， 為 root 才能執行的權限，修改 讓 可以執行 PHP-FPM Service Reload。 於 GitHub Actions 執行時無法於 sudo 過程中輸入密碼，在這裡設定為 ，同時也限制帳號只能執行 reload 這個指令 GitHub 設定加密變數 GitHub Actions 執行的過程中，不會中斷執行等待輸入，因此設定加密變數 (Secrets) 讓 Actions 執行期間帶入需要的變數內容。 加入加密變數的方法：GitHub Repo \u0026ndash;\u0026gt; Settings \u0026ndash;\u0026gt; Secrets \u0026ndash;\u0026gt; New repository secret 主要需要的參數有 、 、 SSH_HOST：伺服器位址 SSH_USERNAME：登入伺服器的帳號名稱 SSH_PRIVATE_KEY：登入的私鑰，由伺服器 取得前面第2步驟的私鑰內容 若 SSH 使用的不是預設的 Port，可以增加 變數存入 Port 號碼 新增 Personal access token 在部署腳本中主要使用 Git 的方式，來拉取程式碼至伺服器上，對於私人儲存庫 (private repositories) 執行期間將要求必須輸入 GitHub 帳號密碼，將會造成執行中斷。我們可以透過建立 GitHub Personal access tokens，讓 Token 代表 GitHub Account 可以存取 GitHub API，同時也可以增加安全性，當懷疑 Token 外洩時，可以重新產生新的 Token 棄用舊的。 建立 Personal access token方法：GitHub Personal access token \u0026ndash;\u0026gt; Generate new token Git Clone Repository 在目標伺服器上，以部署用帳號 (cicd-github) 使用 https 方式 Clone Repository 至本地。 3.2.2 伺服器部署腳本 建立一個 Shell Script ，並將檔案名稱設定為 ，腳本內容如後。 記得讓 檔案有執行權限才能部署。 3.2.3 建立部署 GitHub Action 在 資料夾中建立 檔案。Deployment Action 在 GitHub deploy 分支 PR (pull request) 關閉時觸發，並在確認 後才執行部署。 Note: 若需要 SSH Action 其他輸入參數可以參考 SSH for GitHub Actions 參考資料： GitHub Actions 基礎介紹 GitHub Actions 入门教程 Build, Test, and Deploy Your Laravel Application With GitHub Actions How to create a CI/CD for a Laravel application using GitHub Actions Push deploy a Laravel app for free with GitHub Actions "],[],["Python 套件相依性管理工具 Poetry","2020年06月06日","/2020/06/python-poetry/","Python 在開發時常使用 venv 及 pip 當作開發時的環境管理，後來網路上發現其他開發者推薦的撒尿牛丸 Pipenv ，同時處理套件相依性及虛擬環境。 後來因為套件鎖定仍會更新、更新 LOCK 速度太慢、其他開發者的貢獻沒有併入 master 等問題，造成社群中不少的聲音。社群中於是有了這樣的聲音 Pipenv 描繪了一個美夢，讓我們為 Python 也有了其他語言一樣的套件管理方式，不過卻在後來的 Poetry 的到了更好的實踐。 讓我想嘗試看看 Poetry ，Poetry 和 Pipenv 雷同能夠做虛擬環境及套件依賴的管理，除此之外，也提供了套件打包和發佈管理的功能。 官方網站：https://python-poetry.org/ GitHub：https://github.com/python-poetry/poetry Document：https://python-poetry.org/docs/ 1. 安裝 Peotry 官方推薦的方法 官方建議不要使用 的方式安裝，因為有可能會在全域環境中安裝 Poetry 的相依套件，造成套件污染的情形。 Note: 如果出現下面錯誤，可以修改 ，將 修改為 就可以修復。希望之後的 patch 能夠修復。 參考： issue#1257-Problem vendoring subprocess32 in Ubuntu 2. 環境設定 Poetry 在 Linux 系統的安裝路徑為 ，需要把路徑加入到 環境變數中。若要立即套用至目前的 shell session，可以使用 指令。 建議將上述路徑加到 bashrc 或是 zshrc 中，在開啓 terminal 的時候，就直接套用至 PATH 中。 zplug 套件 zsh-poetry 這個套件，檢查資料夾中是否存在合法的 ，在切換至資料夾時自動啓動虛擬環境（virtual environment） 3. 開始 Poetry 3.1 專案設定 現有專案 在已經存在的專案中可以使用 初始化 poetry，跟著提示輸入詢問的回應，不確定的回應可以直接 使用預設內容，之後都可以再編輯，完成後便會在專案中建立 檔案。 創建新專案 如果要透過 poetry 創建一個新的 python 專案，使用 即可建立一個專案模板的資料夾結構。如果建立的時候需要 資料夾，可以加上 選項。套件名稱弱想與資料架不同，可以使用 指定。 在專案建立後，poetry 安排的資料夾目錄結構。 Python 在 PEP 518 引入了新的標準，使用 檔案來管理各項 meta 資訊，peotry 使用 作為配置的設定檔，專案建立後的 初始內容如下： 初始設定的內容為基礎資訊內容，提供的資訊有限，更完整的 內容會像： 3.2 建立及啓動虛擬環境 確認資料夾中有 檔案，使用 建立虛擬環境，這個指令會讀取 裡的依賴並且安裝套件。不想安裝開發時才會用到的依賴，可以加上 。 3.3 虛擬環境執行 想要即時的在虛擬環境中執行指令，可以使用 的方式。如果要進入虛擬環境則可以用 。 4. 套件管理 Python 條件管理， 相較於 更為符合人性也做得更好，對於套件相依性在升級或是移除後的處理都做的更好，也更為精簡。 4.1 安裝套件 poetry 可以透過 指令來安裝套件，如果有些套件是開發時才需要，例如 pytest ，可以在安裝時加入 \u0026ndash;dev 參數，將該套件標記為 dev 環境才需要安裝。 4.2 追蹤套件 使用 可以查看目前所有安裝套件的依賴，加上 可以以樹狀圖的方式查看套件依賴。 不顯示開發時的依賴。 顯示目前版本及套件最後版本。 僅顯示有新版本的依賴套件。 如果想要查詢特定套件的詳細資訊，可以在指令後接套件名稱 。 4.3 更新套件 獲得最新套件的版本及依賴關係，並更新 檔案，使用 指令。如果要更新特定套件而不是全部，在上述指令後接着套件名稱 。 其他參數， 輸出操作過程但沒有真的執行。 4.4 移除套件 使用 來移除指定的套件。 5. 建立套件及發佈 5.1 建立套件 使用 建立 和 檔案，可加上 建立 或是 。 5.2 發佈套件 指令將會把 指令建立的套件發佈到遠程的儲存庫，如果是第一次發佈上傳前將會自動的註冊套件。 6. Poetry 指令說明 提供了相當多的功能，都可以使用指令來控制 7. 升级 poetry 使用 指令可以將 poetry 升級到最後的穩定版本，如果想嘗試看看較新的預覽版本（可能不穩定）可以加上 選項。 8. 匯出 requirements.txt 有時候佈署運行的環境沒有提供 poetry，也可以匯出 的方式透過 安裝套件。匯出的指令為 ，目前只有提供 的格式。 參考資料： Poetry Document https://myapollo.com.tw/zh-tw/python-poerty/ https://zhuanlan.zhihu.com/p/81025311 . https://shazi.info/pip-pipenv-%E5%92%8C-poetry-%E7%9A%84%E9%81%B8%E6%93%87/ https://www.escapelife.site/posts/fc616494.html https://myoceane.fr/index.php/python-poetry/ https://hackersandslackers.com/python-poetry-package-manager/ "],[],["Ubuntu 上使用 Wacom Intuos 繪圖板","2020年05月05日","/2020/05/wacom-intous-on-ubuntu/","基本上 Ubuntu 18.04 在接上 INTOUS 繪圖板之後，已經可以偵測到並且能夠直接使用。但是只能當作滑鼠一般使用，無法發揮繪圖板功能。必須要再安裝驅動程式來控制。 1. 安裝 xf86-input-wacom 驅動程式 首先在系統上安裝 驅動程式 安裝完成後，重新啓動電腦。 2. 設定 wacam 設備 使用 指令列出目前的 wacom 設備 在我的電腦上輸出的結果： 為繪圖筆的設定 繪圖板上面的按鍵，可以透過 設定 3. 設定對應的螢幕 在螢幕很便宜的世代，大部分的使用者應該跟我一樣有兩個螢幕，並且設定為延伸螢幕讓整個視野可以很大。而繪圖板在預設情形下，會對應到整個延伸之後的大小。 這裏我們可以看到電腦目前接着的螢幕資訊，一個是接在 一個是接在 上。使用 指令，將繪圖板限定在 這個螢幕。 4. 設定繪圖板作業區域與螢幕比例 繪圖板作用的區域和螢幕的比例並不相同，在使用時就有可能因為比例關係，讓畫正圓變成橢圓，正方形變成長方形。 以 取得繪圖板操作區域 也可以使用名稱 接下來就是計算繪圖作業區域與螢幕區域，然後換算成正確的高度： 繪圖板的作業區域範圍與螢幕畫面對應，也就是 對應 。為了能夠正常使用，我們要將繪圖板的作業區域從 16:10 限定為 16:9，讓兩個的比例相同。 我們要將大的縮小，在寬度比例相同下，繪圖板的高度比例由 10 縮小到 9，所以將繪圖板設定的作業高度調整縮小。 繪圖板的作業區域高度計算： 計算完高度後，我們把新的繪圖板作業高度寫回設定。 5. 設定繪圖軟體 GIMP 繪圖板有感壓功能，在 Linux 最常用的繪圖軟體 上使用時卻沒有。我們需要到軟體裡去設定使用感壓繪圖功能。 開啓繪圖軟體 GIMP → → 選擇 device 名稱 ，設定至 **screen** mode 儲存設定，關閉對話視窗 參考資料： http://evanlab.blogspot.com/2018/12/wacom-intuos-bt-m-ctl-6100wl-ubuntu-1804.html https://askubuntu.com/questions/48771/how-to-set-pressure-sensitivity-in-gimp-to-control-line-thickness https://joshuawoehlke.com/wacom-intuos-and-xsetwacom-on-ubuntu-18-04/ https://github.com/linuxwacom/xf86-input-wacom/wiki/Building-The-Driver "],[],["開啓 Github 雙因素認證","2019年08月08日","/2019/08/github-two-factor-authentication/","越來越多的詐騙、盜用帳號，讓網路使用者受到名譽或是財物上的損失，傳統單純使用帳號密碼的方式已經不夠安全，今日一個帳號走天下（ex: 使用 gmail or facebook 登入）的各種應用情境，讓雙因素認證（Two-factor authentication）或是兩階段驗證（Two-step verification）來提高帳號使用安全性顯得更為重要。 雙因素認證 進行登入的時候，認證目前的登入對象是不是「你」是很重要的，必須不容易被他人複製，也不容易與他人重複。現在常見的認證方式： 一種是我們已經知道的，例如密碼或者 PIN 碼； 一種是我們身邊有的，例如手機或者特殊的 USB 鑰匙； 一種是我們與生俱來的，例如指紋、臉部特徵或者其他特徵。 雙因素認證（Two-factor authentication），主要是結合兩種不同的認證方式。例如結合帳號密碼與指紋，或是結合帳號密碼與手機。如果是使用手機，我們可以利用簡訊或是 TOTP 產生的密碼來作為另一個登入認證的因素。 TOTP 基於時間的一次性密碼演算法（Time-based One-Time Password algorithm， TOTP）是一種根據預共用的金鑰與目前時間計算一次性密碼的演算法，結合一個私鑰與目前時間戳，使用一個密碼雜湊函式來生成一次性密碼。通常 30 秒為間隔產生新的密碼。 參考： wiki: Time-based One-Time Password algorithm 開啓 GitHub 雙因素認證 GitHub two-factor authentication（以下簡稱 2FA）主要有兩種方式： 透過 TOTP Apps：使用 App 登入推薦使用 Authy 這個 App，可以設定備份機制不用擔心手機更換或是重置的時候造成無法登入的情形。 透過 SMS：SMS 方式會因為手機收訊的情形而收到限制，安全性上也是較為容易被攔截的方式。 相較於 SMS 建議使用 TOTP mobile app 的方式有較高的安全性，而官方文件（Configuring two-factor authentication ）中提到的三個軟體中，我覺得 Authy 在設定上相對簡單。我想就以 Authy 作為這次設定雙因素認證的說明。 1. GitHub 頁面中雙因素認證設定 1.1 登入 Github 之後在右上方點選帳號圖片，在下拉視窗中選擇 \u0026ldquo;settings\u0026rdquo;（如下圖） Setting 1.2 在設定的左方選單中，選擇 \u0026ldquo;Security\u0026rdquo; 項目 Security 1.3 尚未設定 2FA 會出現如下圖的畫面，點擊 \u0026ldquo;Enable two-factor authentication\u0026rdquo; Enable 2FA 1.4 接下來的畫面，選擇左邊的 \u0026ldquo;Set up using an app\u0026rdquo; Set up using an app 1.5 接着會出現 Recovery codes 畫面，recovery codes 是讓我們在沒有 App 時可以透過出現在螢幕上的這些號碼做登入自己的帳號。避免手機有什麼狀況的時候會無法登入。 可以選擇下載（Download）或是印出來（Print）收好 Recovery codes 1.6 儲存 Recovery codes 後點擊 \u0026ldquo;Next\u0026rdquo; 進入 Scan QR code 頁面 Scan QR code 2. 安裝 Authy mobile app 2.1 下載 Authy mobile app 從平臺的線上軟體商店下載 app Google Play: https://play.google.com/store/apps/details?id=com.authy.authy App Store: https://itunes.apple.com/us/app/authy/id494168017 2.2 完成下載後，開啓 Authy App，依照指示輸入資料及電話，完成整個註冊程序。跟著軟體引導的步驟進行，這裏就不再多做說明。 2.3 在 Authy App 中，點選新增 Account，選擇 \u0026ldquo;Scan QR Code\u0026rdquo; Scan QR code 2.4 將相機對準 step 1.6 的 QR Code 畫面，將 App 畫面中出現的 6 位數字，輸入至 QR Code 畫面下方的欄位。 Six dis-digit code 2.5 按下 \u0026ldquo;Continue\u0026rdquo; 就完成開啓 GitHub 2FA 的步驟了。 "],[],["保留 Configparser 儲存後英文字母大小寫","2019年07月07日","/2019/07/keep-camel-cas-python-configparser/","對於程式執行階段，因為可能在不同設備或是環境有不同設定內容，使用 INI 設定檔讀取或寫入的方式管理相當方便。利用 Python 內建的 來處理 INI 設定檔相當方便，但在讀取後再儲存保留時，會將內容全都轉換為小寫字母。在區分字母大小寫的 Linux 系統中，希望能夠保留原來字母大小，便於閱讀和再使用。 起源 ，在 python 說明文件中提到 All option names are passed through the optionxform() method. Its default implementation converts option names to lower case. 因為所有的 option names 都會經過 方法，都會被轉換為小寫，導致我們使用 write 方式寫入保存 INI 檔的時候，Option 名稱都轉為小寫字母的原因。 我們可以透過自定 屬性來達成讀取後傳回原始的字串，如下內容將其設定為 ，將可以留大小寫字母區分。 參考資料： configparser - Configuration file parser ConfigParser reads capital keys and make them lower case "],[],["用 Git Submodule 管理 Hugo Theme","2019年07月07日","/2019/07/git-submodule-hugo-theme/","通常在 Hugo 目錄下會有一個 資料夾，用來放置使用的佈景主題。然而每個佈景主題通常都會有自己的 GitHub Repository，而我們的 Hugo 內容也會有自己的 Repository，在內容管理上容易相互干擾，佈景主題及我們自己的 Repo 都仍然會持續更新。為了在佈景主題更新時能夠更方便的同步，和我們自己的 Repo 間的同步能夠更好的協作，可以使用 git submodule 方式加入 Hugo Theme。 Git Submodule 什麼是 git submodule？時常我們一個專案上工作時，有可能會使用到另一個 Repo 的內容，或許是一個函式庫或許是另一個套件工具，這些我們專案使用到的外部資源，都有可能是在自己的 Repo 上持續的進行中。 如果把外部的資源複製到自己的專案下，每次在外部程式碼有更新的時候，都會需要一再重複的複製，管理上變得困難。 Git 能夠通過 submodule 處理這樣問題。submodule 允許我們將一個 Git repo 當作另外一個 Git repo 的子目錄。這允許我們 clone 另外一個 repository 到自己的專案中，並且仍然保持我們的提交相對獨立。 Git submodule 加入語法雷同於 clone Hugo theme 以 git submodule 方式加入 將 Hugo theme 以 git submodule 方式加入，我們同樣以 m10c 作為說明範例。 新增 submodule 在 Hugo 的根目錄下，輸入下列指令 當指令完成之後，於根目錄下會生成一個 設定檔，裡面記錄了 git submodule 的一些設定訊息。將這個檔案一起加入到自己的 repo 中，就能夠方便管理。 內容如下 如果以 submodule 加入多個 theme， 中就會有多條相關的設定內容。 更新 submodule 如果專案下的 submodule 不多，可以進入個別的 submodule 資料夾中，執行 的方式去拉下更新的內容。若一次要全部一起更新所有 submodule，可以使用 這個方式將會遞迴進入每個 submodule 中執行 指令 。另一個方式直接使用 的方式一次更新。 刪除 submodule Submodule 的刪除比加入麻煩。沒有 rm 的指令，必須要手動刪除。 要先進入 中將不要的 submodule 區段刪除。 用 方式 刪除 submodule 資料夾 修改 刪除不要的 submodule Clone Hugo 專案 submodule 為空？ 若像我有在不同電腦進行 Hugo Blog 內文撰寫（就是懶得把電腦帶來帶去的），在另一臺用 下載自己的 Hugo 專案時，會發現 submodule 對應的資料夾雖然存在，但是 submodule 資料夾都是空的。 指令並不會一起下載 submodule 中的內容。 可以使用下面的指令可以將 中的內容寫入 ，然後再更新下載 submodule 內容。 ：根據 的名稱和設定將資訊註冊到 內。（但 內移除的 submodule 並不會自動刪除 的相關內容，需手動刪除） ：根據已註冊 的 submodule 進行更新，執行這個指令前最好可以加上 。 當然我們自己知道專案中已經包含 submodule 的時候，就可以在 clone 的時候一次一起更新下來。 參考資料： Git 工具 - 子模組 (Submodules) git submodule的使用 Git Submodule 用法筆記 Git submodule is returning blank? "],[],["Hugo 靜態網頁部署至 GitHub Page","2019年06月06日","/2019/06/hugo-to-github-page/"," 1. 在 ubuntu 上安裝 Hugo 在 ubuntu 上能夠使用 apt 的方式安裝，套件庫的關係版本會比較舊。建議使用 snap 的方式安裝，snap 目前也通用於各種版本的 Linux。 Snap Package apt install 檢查 Hugo 安裝的版本 2. 初始化建立網站 2.1 新增網站 利用 hugo cli 的指令建立檔案結構及必要的檔案。 初始化網站之後，在 資料夾下就會產生下面的文件結構 2.2 設定佈景主題 Hugo 佈景主題網站有提供相當多的選擇，在這裡我以 m10c 這個主題為例。將佈景主題複製到 theme 資料夾下。 在 內加上設定內容，theme 如果有說明其他設定可以一併加入。 如果選擇的佈景主題的資料中，有 資料夾，可以參考其中的 設定。 2.3 本地端啓動網站預覽 使用下面的語法啓動 Hugo 的伺服服務，然後就可以打開瀏覽器，連結到 http://localhost:1313 之後接的是套用的佈景主題名稱 可以瀏覽草稿內容 3. 部署至 GitHub GitHub Pages 有兩種形態，一種是使用者（組織）、一種為專案性質。 User/Organization Pages Project Pages 在這裏我們使用個人的 GitHub Page 也就是 的形態。 3.1 在 GitHub 上建立 Repository 在 GitHub 上建立兩個 repositories，一個為放置 Hugo 內容的程式庫 ，一個是 GitHub Page 使用的程式庫 。 3.2 Clone GitHub Repository 複製貼上目前的 Hugo 專案內容到 clone 下來的資料夾中，並確認能夠正確的啓動 Hugo 伺服器瀏覽本地端網頁內容。 3.3 上傳 Hugo 內容至 GitHub 將 Hugo 專案的內容 push 到 GitHub 上作為備份。 3.4 部署生成內容至 GitHub Page 前面步驟中，執行 沒有真的建立一個靜態網站的內容，要生成靜態網站的內容，需要執行 指令，執行後會在資料夾下生成 資料夾，這個資料夾下的內容才是靜態的網頁內容，也就是要部署至 GitHub Page 的內容。 GitHub Page 的內容要連結部署至先前步驟建立的 repository，在官網的建議中可以使用 方式。 生成靜態網站內容 切換至 資料夾，Push submodule 至 GitHub 中 3.5 瀏覽網站 上傳過一陣子之後，可以開啓瀏覽器連結到自己的 GitHub Page，輸入 4. 自動部署 Script 完成上述內容，已經能夠使用 Hugo 產生靜態網站並部署至 GitHub Page。接著參考官網上的說明內容，建立一個自動部署的 shell script，讓部署的流程更為簡單。 建立 檔案，加入以下的內容 修改 檔案權限為可執行狀態 ，然後執行部署 script 寫下 commit 的內容。執行後就能生成靜態網站內容並部署至 上。 "],[],["Install LEMP in Ubuntu 18.04","2019年05月05日","/2019/05/install-lemp-on-ubuntu/"," LEMP 一直以來都是使用 LAMP（Linux + Apache + MySQL + PHP） 架構居多，基於 Apache 是個胖子加上 MySQL 的黑化\u0026hellip;，嘗試開始使用 LEMP 的組合。LEMP 為 Linux + Nginx + MariaDB + PHP，後面敘述為在 ubuntu 18.04 中的安裝方式與設定。 Nginx 伺服器 安裝 Nginx 網頁伺服器 Negix 已經有內建在 ubuntu 套件庫中，可以使用 直接安裝，在 command line 輸入下列指令進行安裝： 防火牆設定 開啓 ufw 防火牆設定允許 nginx 服務通過 開啓防火牆前，請先確認是不是已經先開啓 SSH 通過，以免把自己鎖在外面。 安裝 MariaDB 資料庫 MariaDB 10.2 以上版本與 MySQL 的兼容性優於 10.1，安裝 MariaDB 10.2 以上版本，目前穩定版本為 10.4。 安裝 MariaDB 使用 MariaDB Repositories 方式安裝，首先加入 MariaDB 10.4 的官方套件庫資訊 更新套件庫資訊後直接安裝 MariaDB 修改預設路徑 如果不想把 var 塞爆，或是希望有獨立的分區來存儲，可以透過修改 Mariadb 預設存資料檔放路徑來達到。（選擇性） 預設 mariadb 僅接受本機連線，如果需要由其他伺服器連線，需要修改 中的 bind-address 項目 參考資料：Setting up MariaDB Repositories 安裝 PHP 及設定 Nginx 支援 PHP Nginx 不包含原生的 PHP 處理，所以我們必須安裝 PHP-FPM (FastCGI Process Manager)。同時也安裝 php-mysql 使 PHP 能與 MariaDB 溝通。 Nginx 透過 PHP 的 Socket 溝通，安裝 PHP 後確認 scoket 的執行情形。並記住 在 nginx 設定中會使用 php7.x-fpm.sock 修改 Nginx 設定檔，預設的網站設定檔位置在 找到 index 位置，在識別副檔名的部分加入 ，以預設支援 php 的 index 頁面。 找到設定 php 區塊，移除部分註解符號 ，將前面 socket 的位置及名稱換上。 用下面的指令先檢查 nginx 設定的語法有沒有錯誤。 重新 reload nginx 測試 PHP 在預設路徑 下建立一個 檔案加入 phpinfo 語法 連線到 ，如果能夠看到相關的 PHP 資訊就是成功了。確認後記得要再刪除 info.php 檔案避免透露過多的資訊在網路上。 安裝 Composer Composer 是 PHP 生態系最廣為使用的相依管理工具。 參考：Download Composer "]]